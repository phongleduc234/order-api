name: Build and Deploy Order API

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0

    - name: Build and test
      run: |
        dotnet build
        dotnet test

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/order-api:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/order-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    container:
      image: ubuntu:22.04
    steps:
    - name: Install dependencies
      run: |
        apt update && apt install -y curl openssh-client unzip
        curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
        chmod +x cloudflared
        mv cloudflared /usr/local/bin/

    - name: Setup SSH key
      run: |
        # Tạo thư mục .ssh trong thư mục tạm /tmp
        mkdir -p /tmp/.ssh
        echo "${{ secrets.SSH_KEY }}" > /tmp/.ssh/id_rsa
        chmod 600 /tmp/.ssh/id_rsa
        ssh-keyscan ssh.cuder.xyz >> /tmp/.ssh/known_hosts

        # Thiết lập SSH agent để sử dụng key
        eval $(ssh-agent -s)
        ssh-add /tmp/.ssh/id_rsa

    - name: Copy deployment file
      run: |
        # Copy deployment.yaml file from your repo to the correct location
        cp k8s/deployment.yaml /tmp/deployment.yaml

    - name: Apply Kubernetes deployment
      run: |
        ssh phongle@ssh.cuder.xyz -o ProxyCommand="cloudflared access ssh --hostname ssh.cuder.xyz" "
          kubectl apply -f /tmp/deployment.yaml &&
          kubectl rollout status deployment/order-api --timeout=60s
        "
